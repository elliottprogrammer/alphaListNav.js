{"version":3,"sources":["../alphaListNav.js"],"names":["AlphaListNav","listElem","options","console","error","listItems","_getListItems","alphaObj","_getAlphaObj","log","newListHTML","_generateNewListHTML","alphaNav","_generateAlphaNav","parentNode","replaceChild","newListElem","document","getElementById","insertBefore","alphaNavElem","initAlphaListNav","addEventListener","e","preventDefault","target","dataset","filter","letter","children","btn","classList","remove","ul","add","div","id","showCounts","Array","prototype","slice","call","forEach","alphaLink","count","Object","keys","reduce","accum","key","length","countElem","createElement","className","style","cssText","textContent","appendChild","removeChild","elem","node","ret","i","nodeType","_getText","firstChild","nextSibling","nodeValue","initLetter","includeAll","querySelector","toLowerCase","allListGroups","querySelectorAll","hasOwnProperty","initHidden","initHiddenText","firstLetter","_getArrayAtoZ","find","char","listItemsArray","alphaList","val","text","filterSelector","filterElem","trim","replace","prefixes","RegExp","result","exec","charAt","lastIndex","match","concatenateNums","push","initHiddenTextLi","wrapper","NewList","sort","a","b","map","showLetterHeadings","heading","_getHeading","cloneNode","noMatchDiv","noMatchUl","noMatchLi","noMatchText","abcChars","includeNums","_getArray0to9","reverse","unshift","toString","includeOther","navigationEntries","block","navChar","allText","flagDisabled","removeDisabled","innerHTML","apply","x","String","fromCharCode","defaultOptions","_isDomElement","regexes","source","join","init","HTMLElement","nodeName","headingText","test","toUpperCase"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/*! alphaListNav.js - v0.7.1\r\nBuild Date: 02-05-2020\r\nAuthor: [Bryan Elliott] (https://github.com/elliottprogrammer/)\r\nGit Repository: git+https://github.com/elliottprogrammer/alphaListNav.js.git */\r\n\r\n/**\r\n* ** TODO: **\r\n* 2. Add options\r\n*    - dont-count:\r\n*    - Remember last letter cookie?\r\n*    - onLetterClick function()\r\n* 3. Add nice css styling\r\n* 4. Refactor & optimize for size\r\n* \r\n**/\r\n\r\nclass AlphaListNav {\r\n    constructor(listElem, options = {}) {\r\n\r\n        const defaultOptions = {\r\n            initHidden: true,\r\n            initHiddenText: 'Tap a letter above to view matching items',  // string or boolean false\r\n            initLetter: '',\r\n            includeAll: true,\r\n            allText: 'All',\r\n            noMatchText: 'No matching entries',\r\n            includeNums: true,\r\n            concatenateNums: true, // 0 - 9\r\n            includeOther: false,\r\n            flagDisabled: true,\r\n            removeDisabled: false,\r\n            prefixes: [], // array of strings and/or RegEx's\r\n            filterSelector: '', \r\n            showCounts: true,\r\n            showLetterHeadings: true,\r\n        }\r\n\r\n        this.listElem = this._isDomElement(listElem) ? listElem : false;\r\n\r\n        this.options = {\r\n            ...defaultOptions,\r\n            ...options\r\n        }\r\n\r\n        // if there is options.prefixes[], check if any are strings, if so, convert to them to RegEx's\r\n        if (this.options.prefixes.length) {\r\n            const regexes = this.options.prefixes.map(val => {\r\n                if (typeof val === 'string') {\r\n                    val = val.replace(/[.*+?^${}()|[\\]\\\\]/, '\\\\$&');\r\n                    return val + '\\\\s';//new RegExp(val);\r\n                }\r\n                if (typeof val === 'object' && val instanceof RegExp) {\r\n                    return val.source + '\\\\s';\r\n                }\r\n            });\r\n            this.options.prefixes = new RegExp(regexes.join(\"|\"), \"gi\");\r\n        }\r\n\r\n        this.init();\r\n    }\r\n\r\n    init = () => {\r\n\r\n        // if first arg is not an HTMLElement, return\r\n        if (!this.listElem) { console.error('The supplied argument must be a HTML DOM element.'); return; }\r\n        // get array of list items\r\n        const listItems = this._getListItems(this.listElem);\r\n        //console.log(listItems);\r\n        // sort list into an alphabetical object\r\n        const alphaObj = this._getAlphaObj(listItems);\r\n        console.log(alphaObj);\r\n        // generate new list html with sorting markup\r\n        const newListHTML = this._generateNewListHTML(alphaObj);\r\n        // generate the alpha-nav buttons html\r\n        const alphaNav = this._generateAlphaNav(alphaObj);\r\n        // Replace the old list with the new alpha-list in the dom\r\n        this.listElem.parentNode.replaceChild(newListHTML, this.listElem);\r\n        // get reference to the new alpha-list\r\n        const newListElem = document.getElementById('alpha-list');\r\n        // Add alpha-nav buttons to dom\r\n        newListElem.parentNode.insertBefore(alphaNav, newListElem);\r\n        // get reference to alpha-nav\r\n        const alphaNavElem = document.getElementById('alpha-nav');\r\n\r\n        this.initAlphaListNav(newListElem, alphaNavElem, alphaObj);\r\n\r\n        // Add event listener to alpha-nav buttons\r\n        alphaNavElem.addEventListener('click', e => {\r\n            // TODO: replace with create selectLetter() function\r\n            e.preventDefault();\r\n            if (!e.target.dataset.filter) return;\r\n            const letter = e.target.dataset.filter;\r\n            // remove active class from all buttons\r\n            for (let btn of alphaNavElem.children) {\r\n                btn.classList.remove('active');\r\n            }\r\n            // remove active class from all lists\r\n            for (let ul of newListElem.children) {\r\n                ul.classList.remove('active');\r\n            }\r\n            // add active class to button clicked\r\n            e.target.classList.add('active');\r\n            // add active class to the list matching the cooresponding clicked letter\r\n            if (letter === '*') {\r\n                console.log(newListElem.children);\r\n                for (let div of newListElem.children) {\r\n                    if (div.id !== 'no-match' )\r\n                        div.classList.add('active');\r\n                }\r\n            } else {\r\n                document.getElementById(letter).classList.add('active');\r\n            }\r\n\r\n        });\r\n\r\n        // Show letter counts\r\n        if (this.options.showCounts) {\r\n            Array.prototype.slice.call(alphaNavElem.children).forEach(alphaLink => {\r\n                alphaLink.addEventListener('mouseover', e => {\r\n                    let count = 0;\r\n                    if (e.target.dataset.filter) {\r\n                        const filter = e.target.dataset.filter;\r\n                        if (filter !== 'no-match') {\r\n                            if (filter === '*') {\r\n                                count = Object.keys(alphaObj).reduce((accum, key) => {\r\n                                    return accum + alphaObj[key].length;\r\n                                }, 0);\r\n                            } else {\r\n                                count = alphaObj[filter].length\r\n                            }\r\n                        }\r\n                    };\r\n                    const countElem = document.createElement('span');\r\n                    countElem.className=\"alphaNav-count-elem\";\r\n                    countElem.style.cssText = 'position:absolute;top:-12px;left:0;width:100%;text-align:center;font-size:75%;';\r\n                    countElem.textContent = count;\r\n                    e.target.appendChild(countElem);\r\n                });\r\n    \r\n                alphaLink.addEventListener('mouseout', e => {\r\n                    e.target.removeChild(e.target.children[0]);\r\n                })\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    // Retrieve the text value from DOM node or an array of DOM nodes.\r\n    // Taken from jQuery (source: https://github.com/jquery/jquery/blob/master/src/core.js)\r\n    _getText = (elem) => {\r\n        let node,\r\n            ret = \"\",\r\n            i = 0,\r\n            nodeType = elem.nodeType;\r\n        if (!nodeType) {\r\n            // If no nodeType, this is expected to be an array\r\n            while ((node = elem[i++])) {\r\n                // Do not traverse comment nodes\r\n                ret += this._getText(node);\r\n            }\r\n        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\r\n            // Use textContent for elements\r\n            if (typeof elem.textContent === \"string\") {\r\n                return elem.textContent;\r\n            } else {\r\n                // Traverse its children\r\n                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\r\n                    ret += this._getText(elem);\r\n                }\r\n            }\r\n        } else if (nodeType === 3 || nodeType === 4) {\r\n            return elem.nodeValue;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    initAlphaListNav = (newListElem, alphaNavElem, alphaObj) => {\r\n        // if initLetter is set, show that letter first\r\n        if (this.options.initLetter) {\r\n            // if init letter is All(*), show all\r\n            if (this.options.initLetter === '*' && this.options.includeAll) {\r\n                alphaNavElem.querySelector(`a[data-filter=\"${this.options.initLetter.toLowerCase()}\"]`).classList.add('active');\r\n                const allListGroups = newListElem.querySelectorAll('div.alpha-list-wrapper');\r\n                Array.prototype.slice.call(allListGroups).forEach(div => div.classList.add('active'));\r\n                // else show init letter, if it exists..\r\n            } else if (alphaObj.hasOwnProperty(this.options.initLetter.toLowerCase())) {\r\n                // TODO: replace with create selectLetter() function\r\n                alphaNavElem.querySelector(`a[data-filter=\"${this.options.initLetter.toLowerCase()}\"]`).classList.add('active');\r\n                newListElem.querySelector(`#${this.options.initLetter.toLowerCase()}`).classList.add('active');\r\n            }\r\n        } else {\r\n            // if initHidden set, don't show list\r\n            if (this.options.initHidden) {\r\n                if (this.options.initHiddenText)\r\n                    document.getElementById('initText').classList.add('active');\r\n                // if includeAll is set, show all list\r\n            } else if (this.options.includeAll) {\r\n                const allListGroups = newListElem.querySelectorAll('div.alpha-list-wrapper');\r\n                Array.prototype.slice.call(allListGroups).forEach(div => div.classList.add('active'));\r\n                alphaNavElem.querySelector(`a[data-filter=\"*\"]`).classList.add('active');\r\n                // if none of above, find first letter with with list items, and show that first.\r\n            } else {\r\n                const firstLetter = this._getArrayAtoZ().find(char => alphaObj.hasOwnProperty(char.toLowerCase())).toLowerCase();\r\n\r\n                // TODO: replace with/create selectLetter() function\r\n                alphaNavElem.querySelector(`a[data-filter=\"${firstLetter}\"]`).classList.add('active');\r\n                document.getElementById(firstLetter).classList.add('active');\r\n            }\r\n        }\r\n    }\r\n\r\n    _getListItems(listElem) {\r\n        if (!listElem.children.length)\r\n            return [];\r\n        return Array.prototype.slice.call(listElem.children);\r\n    }\r\n\r\n    _isDomElement(elem) {\r\n        return (\r\n            typeof HTMLElement === \"object\" ? elem instanceof HTMLElement : //DOM2\r\n                elem && typeof elem === \"object\" && elem !== null && elem.nodeType === 1 && typeof elem.nodeName === \"string\"\r\n        );\r\n    }\r\n\r\n    // create object of list items ordered by each alphabet letter\r\n    _getAlphaObj = (listItemsArray) => {\r\n        const alphaList = listItemsArray.reduce((accum, val) => {\r\n            let text = '';\r\n            if (this.options.filterSelector) {\r\n                const filterElem = val.querySelector(this.options.filterSelector);\r\n                text = filterElem ? this._getText(filterElem) : this._getText(val);\r\n            } else {\r\n                text = this._getText(val);\r\n            }\r\n            if (text) {\r\n                // if text first char is (-_*) for some reason, remove it because it will cause problems.\r\n                text.trim().replace(/^[_*-]/, '');\r\n                let letter;\r\n                if (this.options.prefixes instanceof RegExp) {\r\n                    let result;\r\n                    if ((result = this.options.prefixes.exec(text)) !== null) {\r\n                        letter = text.charAt(this.options.prefixes.lastIndex).toLowerCase();\r\n                    } else {\r\n                        letter = text.charAt(0).toLowerCase();\r\n                    }\r\n                } else {\r\n                    letter = text.charAt(0).toLowerCase();\r\n                }\r\n                if (letter.match(/[0-9A-Za-z]/)) {\r\n                    if (this.options.concatenateNums) {\r\n                        if (letter.match(/[0-9]/)) {\r\n                            letter = '_';\r\n                        }\r\n                    }\r\n                } else {\r\n                    letter = '-'\r\n                }\r\n\r\n                if (accum[letter]) {\r\n                    accum[letter].push(val)\r\n                } else {\r\n                    accum[letter] = [val];\r\n                }\r\n            }\r\n            return accum;\r\n        }, {});\r\n        if (this.options.initHidden) {\r\n            const initHiddenTextLi = document.createElement('li');\r\n            initHiddenTextLi.className = 'init-hidden-text';\r\n            initHiddenTextLi.textContent = this.options.initHiddenText\r\n            alphaList['initText'] = [initHiddenTextLi];\r\n        }\r\n        return alphaList;\r\n    }\r\n\r\n    _getHeading(key) {\r\n        let headingText = '';\r\n        switch(true) {\r\n            case /^[*]$/.test(key):\r\n                headingText = this.options.allText;\r\n                break;\r\n            case /^[_]$/.test(key):\r\n                headingText = '0 - 9';\r\n                break;\r\n            case /^[-]$/.test(key):\r\n                headingText = 'Others';\r\n                break;\r\n            case /^initText$/.test(key):\r\n                break;\r\n            default:\r\n                headingText = key.toUpperCase();\r\n        }\r\n        return headingText;\r\n    }\r\n\r\n    // generate new list HTML markup\r\n    _generateNewListHTML = (alphaObj) => {\r\n        const wrapper = document.createElement('div');\r\n        wrapper.id = 'alpha-list';\r\n        wrapper.className = 'alpha-list';\r\n        const NewList = Object.keys(alphaObj)\r\n            .sort((a,b) => {\r\n                if (a === '-') return 1;\r\n                if (b === '-') return -1;\r\n                if (a < b)\r\n                    return -1;\r\n                if (a > b)\r\n                    return 1;\r\n                return 0;\r\n            })\r\n            .map((key) => {\r\n            const div = document.createElement('div');\r\n            div.id = key;\r\n            div.className = 'alpha-list-wrapper';\r\n            if (this.options.showLetterHeadings) {\r\n                const heading = document.createElement('h3');\r\n                heading.className = 'alpha-list-heading';\r\n                heading.textContent = this._getHeading(key)\r\n                if (heading.textContent)\r\n                    div.appendChild(heading);\r\n            }\r\n            const ul = document.createElement('ul');\r\n            ul.className = 'alpha-list-group';\r\n            \r\n            alphaObj[key].forEach(node => {\r\n                ul.appendChild(node.cloneNode(true));\r\n            });\r\n            div.appendChild(ul);\r\n            wrapper.appendChild(div);\r\n            return div;   \r\n        });\r\n        const noMatchDiv = document.createElement('div');\r\n        noMatchDiv.id = 'no-match';\r\n        const noMatchUl = document.createElement('ul');\r\n        noMatchUl.className = 'no-match-group';\r\n        const noMatchLi = document.createElement('li');\r\n        noMatchLi.textContent = this.options.noMatchText;\r\n        \r\n        noMatchUl.appendChild(noMatchLi);\r\n        noMatchDiv.appendChild(noMatchUl);\r\n        wrapper.appendChild(noMatchDiv);\r\n        return wrapper;\r\n    }\r\n\r\n    // Generate alphabet navigation HTML markup\r\n    _generateAlphaNav = (alphaObj) => {\r\n        const alphaNav = document.createElement('div');\r\n        alphaNav.id = 'alpha-nav';\r\n        alphaNav.className = 'character-container';\r\n        const abcChars = this._getArrayAtoZ();\r\n        if (this.options.includeNums) {\r\n            if (!this.options.concatenateNums) {\r\n                this._getArray0to9().reverse().forEach(val => abcChars.unshift(val.toString()));\r\n            } else {\r\n                abcChars.unshift('_');\r\n            }\r\n        }\r\n        if (this.options.includeOther)\r\n            abcChars.push('-');\r\n        if (this.options.includeAll)\r\n            abcChars.unshift('*')\r\n        console.log(abcChars);\r\n        const navigationEntries = abcChars.reduce((block, navChar) => {\r\n\r\n            if (alphaObj[navChar.toLowerCase()]) {\r\n                if (navChar === '_') {\r\n                    return block + '<a class=\"character-element\" data-filter=\"' + navChar.toLowerCase() + '\" href=\"#\">0 - 9</a>';\r\n                } else if (navChar === '-') {\r\n                    return block + '<a class=\"character-element\" data-filter=\"' + navChar.toLowerCase() + '\" href=\"#\">...</a>';\r\n                } else {\r\n                    return block + '<a class=\"character-element\" data-filter=\"' + navChar.toLowerCase() + '\" href=\"#\">' + navChar + '</a>';\r\n                }\r\n\r\n            } else if (navChar === '*') {\r\n                return block + '<a class=\"character-element\" data-filter=\"' + navChar.toLowerCase() + '\" href=\"#\">' + this.options.allText + '</a>';\r\n            }\r\n            if (this.options.flagDisabled) {\r\n                if (this.options.removeDisabled) {\r\n                    return block;\r\n                }\r\n                if (navChar === '_') {\r\n                    return block + '<div class=\"character-element disabled\">0 - 9</div>';\r\n                } else if (navChar === '-') {\r\n                    return block + '<div class=\"character-element disabled\">...</div>';\r\n                } else {\r\n                    return block + '<div class=\"character-element disabled\">' + navChar + '</div>';\r\n                }   \r\n            }\r\n            return block + '<a class=\"character-element\" data-filter=\"no-match\" href=\"#\">' + navChar + '</a>';\r\n        }, '');\r\n        alphaNav.innerHTML = navigationEntries;\r\n        return alphaNav;\r\n    }\r\n\r\n    // generate array of alphebet, a - z\r\n    _getArrayAtoZ = () => {\r\n        return Array\r\n            .apply(null, { length: 26 })\r\n            .map((x, i) => String.fromCharCode(65 + i));\r\n    }\r\n\r\n    _getArray0to9 = () => {\r\n        return Array\r\n            .apply(null, new Array(10))\r\n            .map((x, i) => i);\r\n    };\r\n\r\n}"],"file":"alphaListNav.js"}